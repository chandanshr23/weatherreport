ARDUINO CODE


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Include libraries for Wi-Fi and sensor communication (library names may vary)
#include <ESP8266WiFi.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <Adafruit_BMP085.h>

// Define Wi-Fi credentials
const char* ssid = "your-ssid";
const char* password = "your-password";

// Define the DHT22 sensor pin
#define DHTPIN 2  // Replace with your actual pin number
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);

// Define the rain sensor pin
#define RAIN_SENSOR_PIN 4 // Replace with your actual pin number

// Define the BMP085/BMP180 sensor object
Adafruit_BMP085 bmp;

// Function to read temperature and humidity from the DHT22 sensor
void readDHT22(float *temperature, float *humidity) {
    *temperature = dht.readTemperature();
    *humidity = dht.readHumidity();
}

// Function to read rain sensor data
int readRainSensor() {
    // Replace this with code to read your rain sensor
    // Example: int rainLevel = digitalRead(RAIN_SENSOR_PIN);
    // Adjust the logic based on how your rain sensor works
    int rainLevel = 0; // Placeholder value
    return rainLevel;
}

// Function to read barometric pressure
float readBarometricPressure() {
    float pressure = bmp.readPressure() / 100.0F; // Pressure in hPa
    return pressure;
}

void setup() {
    Serial.begin(9600);

    // Connect to Wi-Fi
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connecting to WiFi...");
    }
    Serial.println("Connected to WiFi");

    // Initialize DHT sensor
    dht.begin();

    // Initialize BMP085/BMP180 sensor
    if (!bmp.begin()) {
        Serial.println("Could not find a valid BMP085/BMP180 sensor, check wiring!");
        while (1);
    }
}

void loop() {
    // Read data from sensors
    float temperature, humidity;
    int rainLevel;
    float pressure;

    readDHT22(&temperature, &humidity);
    rainLevel = readRainSensor();
    pressure = readBarometricPressure();

    // Create a JSON payload with the sensor data
    char payload[256];
    snprintf(payload, sizeof(payload), "{\"temperature\": %.2f, \"humidity\": %.2f, \"rain\": %d, \"pressure\": %.2f}", temperature, humidity, rainLevel, pressure);

    // Send data to a remote server or cloud service over Wi-Fi
    // You need to implement this part based on your chosen communication protocol and server

    // Sleep for a specified interval (e.g., 15 minutes)
    // You need to implement this part using appropriate sleep functions
    delay(900000);  // 15 minutes in milliseconds
}
